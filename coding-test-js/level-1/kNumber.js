/*

문제 설명
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.

*/

// 내가 제시한 정답

function solution(array, commands) {
  return commands.map(([i, j, k]) => {
    // 1) 잘라내기
    const sliced = array.slice(i - 1, j);
    // 2) 정렬하기
    sliced.sort((a, b) => a - b);
    // 3) k번째 값 꺼내기 (배열은 0부터 시작하므로 k-1)
    return sliced[k - 1];
  });
}

// 모든 코드는 이해하고 주석을 달아서 설명할 것
// 할 수 있는 데까지 최소한의 코드와 복잡도를 생각하고 작성할 것
// 이해하지 못할 경우 AI의 도움을 받아 코드를 작성하고 코드 리뷰를 진행 한 뒤 다시 문제를 풀어볼 것

// 코드 리뷰 때 인상 깊었던 코드

function solution(array, commands) {
  return commands.map((v) => { // commands의 값을 리턴할건데 (같은 구조)
    return array // 어레이를
      .slice(v[0] - 1, v[1]) // array의 0번 (1번) 부터 commands에서 정해준 번호까지 인덱스를 자르고
      .sort((a, b) => a - b) // 오름차순으로 정렬하고
      .slice(v[2] - 1, v[2])[0]; // 정렬된 값 중에 k 값을 꺼내서 리턴
  });
}

// 가장 간결하고 이해하기 쉬운 코드를 가져올 것
// 코드를 읽고 이해한 뒤 주석을 달아 설명을 작성할 것
